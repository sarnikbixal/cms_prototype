{"version":3,"sources":["actions/actionTypes.js","reducers/ordersReducer.js","reducers/notificationsReducer.js","reducers/index.js","actions/orderActions.js","components/Products.js","components/CheckOut.js","components/OrderConfirm.js","actions/notificationActions.js","components/TrackOrder.js","components/Schedule.js","components/Routes.js","components/HeaderBar.js","components/Notification.js","components/Notifications.js","App.js","serviceWorker.js","store/configureStore.js","index.js"],"names":["SET_ORDER_SUCCESS","SET_ORDER_FAILURE","UPDATE_ORDER_STATUS_SUCCESS","DELETE_NOTIFICATION_SUCCESS","NEW_NOTIFICATION_SUCCESS","initialState","model","rootReducer","combineReducers","order","state","arguments","length","undefined","action","type","types","Object","objectSpread","steps","notifications","defineProperty","notification","notificationId","clone","_","id","baseUri","setOrderSuccess","setOrderFailure","placeOrder","_order","url","concat","options","params","dispatch","Promise","resolve","reject","axios","then","res","_data","data","error","catch","e","message","getOrder","_orderId","orderId","updateOrderStatus","updateOrderStatusSuccess","downloadICS","console","log","createICS","_date","date","Products","props","products","product","react_default","a","createElement","className","key","title","desc","Order","components_Products","SubmitOrderButton","onClick","submitOrderFn","CheckOut","_this","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","orderActions","setState","isPlaced","window","location","href","err","placedDate","lastUpdateDate","user","username","firstName","lastName","email","status","timestamp","isPending","isFilled","CheckOut_Order","CheckOut_SubmitOrderButton","Component","connect","ownProps","bindActionCreators","OrderConfirm","componentDidMount","handleButtonClick","match","_this2","deleteNotificationSuccess","deleteNotification","newNotificationSuccess","mockTicketNotification","stepId","step","notificationType","displayMessage","Date","getTime","tsFormat","moment","format","trim","Steps","index","isLast","TrackOrder_Step","submitTicketFn","Spacer","Step","isBlocked","ticket","isResolved","TrackOrder_Spacer","TrackOrder","fillStepsTimer","componentDidUpdate","prevProps","setAllFilled","startStepId","unFilledStep","interval","setInterval","_steps","prevStep","clearInterval","submitTicket","notificationActions","setTimeout","handlePickupClick","isReadyForPickup","items","TrackOrder_Steps","DatePicker","material_ui_pickers_esm","utils","Grid","container","classes","justify","margin","label","value","selectedDate","onChange","handleDateChange","KeyboardButtonProps","aria-label","Radios","times","time","autoComplete","name","add","tsTimeFormat","Schedule","handleConfirm","isReadyForDownload","handleDownloadICS","handleChooseDate","isShowDatePicker","makeStyles","grid","width","Schedule_Radios","Schedule_DatePicker","DateFnsUtils","Routes","Switch","Route","exact","path","render","components_CheckOut","assign","pageTitle","components_OrderConfirm","components_TrackOrder","components_Schedule","HeaderBar","withRouter","Notification","class","role","closeFn","Notifications","handleCloseClick","notificationsContainer","ordered","note","components_Notification","isAnimate","side","isFixed","App","components_HeaderBar","components_Routes","components_Notifications","Boolean","hostname","store","createStore","applyMiddleware","thunk","reduxImmutableStateInvariant","ReactDOM","react_redux_es","BrowserRouter","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.4470c908.chunk.js","sourcesContent":["//Orders\nexport const SET_ORDER_SUCCESS = 'SET_ORDER_SUCCESS';\nexport const SET_ORDER_FAILURE = 'SET_ORDER_FAILURE';\n\nexport const SET_ORDER_STATUS_SUCCESS = 'SET_ORDER_STATUS_SUCCESS';\nexport const SET_ORDER_STATUS_FAILURE = 'SET_ORDER_STATUS_FAILURE';\n\nexport const UPDATE_ORDER_STATUS_SUCCESS = 'UPDATE_ORDER_STATUS_SUCCESS';\nexport const UPDATE_ORDER_STATUS_FAILURE = 'UPDATE_ORDER_STATUS_FAILURE';\n\n//NOTIFICATIONS\nexport const DELETE_NOTIFICATION_SUCCESS = 'DELETE_NOTIFICATION_SUCCESS';\nexport const NEW_NOTIFICATION_SUCCESS = 'NEW_NOTIFICATION_SUCCESS';","import * as types from '../actions/actionTypes';\nimport * as _ from 'lodash';\n\nconst initialState =  {};\n\nexport default function ordersReducer(state = initialState, action){\n    switch(action.type){\n        case types.SET_ORDER_SUCCESS:\n            return action.order;\n        case types.UPDATE_ORDER_STATUS_SUCCESS:\n            return {\n                ...state, steps: action.steps\n            }\n        default:\n            return state;\n    }\n}","import * as types from '../actions/actionTypes';\nimport * as _ from 'lodash';\n\nconst initialState =  {\n    model: {}\n}\n\nexport default function notificationsReducer(state = initialState, action){\n    switch(action.type){\n        case 'TEST_NOTIFICATION':\n            return {\n                ...state, model: {\n                    ...state.model, \n                        [action.notification.notificationId]: action.notification\n                }\n            };\n\n        case types.NEW_NOTIFICATION_SUCCESS:\n            return{\n                ...state, model: {\n                    ...state.model, \n                        [action.notification.notificationId]: action.notification\n                }\n            }\n        \n        case types.DELETE_NOTIFICATION_SUCCESS:\n            let clone = _.cloneDeep(state.model);\n            delete clone[action.id];\n            clone = action.id === -1 ? {} : clone;\n            return {\n                ...state, \n                model: clone\n            };\n        default:\n            return state;\n    }\n}","import { combineReducers } from 'redux';\nimport order from './ordersReducer';\nimport notifications from './notificationsReducer';\n\nconst rootReducer = combineReducers({\n    order,\n    notifications\n});\n\nexport default rootReducer;","import * as types from './actionTypes';\nimport * as _ from 'lodash';\nimport * as axios from 'axios';\n\nconst baseUri = process.env.NODE_ENV === 'production' ? 'https://bixal-cms-prototype.herokuapp.com' : 'http://localhost:3001';\n\nexport function setOrderSuccess(order){\n    return {type: types.SET_ORDER_SUCCESS, order};\n}\n\nexport function setOrderFailure(order){\n    return {type: types.SET_ORDER_FAILURE, order};\n}\n\nexport function placeOrder(_order){\n    let url = `${baseUri}/api/placeOrder`;\n    let options = {\n        params:{\n            order: _order\n        }\n    };\n    \n    return function(dispatch){\n        return new Promise((resolve, reject)=>{\n            axios.post(url, options)\n            .then(res => {\n                let _data = res.data;\n                if(_data.error){\n                    dispatch(setOrderFailure(_data.error));\n                    reject(_data.error);\n                }else{\n                    dispatch(setOrderSuccess(_data));\n                    resolve(_data);\n                }\n            }).catch(e => {\n                dispatch(setOrderSuccess(e.message));\n                reject(e.message);\n            });\n        });\n    }\n}\n\nexport function getOrder(_orderId){\n    let url = `${baseUri}/api/getOrder`;\n    let options = {\n        params:{\n            orderId: `order_${_orderId}`\n        }\n    };\n    \n    return function(dispatch){\n        return new Promise((resolve, reject)=>{\n            axios.post(url, options)\n            .then(res => {\n                let _data = res.data;\n                if(_data.error){\n                    dispatch(setOrderFailure(_data.error));\n                    reject(_data.error);\n                }else{\n                    dispatch(setOrderSuccess(_data));\n                    resolve(_data);\n                }\n            }).catch(e => {\n                dispatch(setOrderFailure(e.message));\n                reject(e.message);\n            });\n        });\n    }\n}\n\nexport function updateOrderStatus(steps){\n    return function(dispatch){      \n        dispatch(updateOrderStatusSuccess(steps));\n    }\n}\n\nexport function updateOrderStatusSuccess(steps){\n    return {type: types.UPDATE_ORDER_STATUS_SUCCESS, steps};\n}\n\nexport function downloadICS(_order){\n    let url = `${baseUri}/api/downloadICS`;\n    let options = {};\n    return function(dispatch){\n        axios.get(url, options)\n        .then(res => {\n            let _data = res.data;\n            console.log(_data)\n        }).catch(e => {\n            console.log(e)\n        });\n    }\n}\n\nexport function createICS(_order, _date){\n    let url = `${baseUri}/api/createICS`;\n    let options = {\n        params:{\n            order: _order,\n            date: _date\n        }\n    };\n    return function(dispatch){\n        return new Promise((resolve, reject)=>{\n            axios.post(url, options)\n            .then(res => {\n                let _data = res.data;\n                console.log(_data)\n                if(_data.error){\n                    reject(_data.error);\n                }else{\n                    resolve(_data);\n                }\n            }).catch(e => {\n                reject(e.message);\n            });\n        })\n    }\n}","import React from 'react';\nimport * as _ from 'lodash';\n\nconst Products = (props) =>{\n    return _.map(props.products, (product)=>{\n        return (\n            <label className=\"product btn btn-outline-secondary btn-block text-left font-weight-bolder\" key={product.id}>\n                <small className=\"font-weight-normal pl-4\">{product.title}</small>    \n                <small className=\"font-weight-normal pl-4\">{product.desc}</small>\n            </label>\n        )\n    });\n}\n\nexport default Products;","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { bindActionCreators } from 'redux';\nimport * as orderActions from '../actions/orderActions';\nimport * as _ from 'lodash';\nimport Products from './Products';\n\nconst Order = (props) =>{\n    return (\n        <div className=\"order\">\n            <Products products={props.order.products} />\n        </div>\n    )\n}\n\nconst SubmitOrderButton = (props) =>{\n    return (\n        <button className=\"button btn-success btn-block btn-lg\" onClick={()=>{props.submitOrderFn()}}>\n            PLACE ORDER\n        </button>\n    )\n}\n\nclass CheckOut extends Component {\n    constructor(props){\n        super();\n        this.state = {\n            isPlaced: false,\n            order: {\n                \"id\": 1,\n                \"placedDate\": null,\n                \"lastUpdateDate\": null,\n                \"user\":{\n                    \"username\": \"test_user1\",\n                    \"firstName\": \"justin\",\n                    \"lastName\": \"sarnik\",\n                    \"email\": \"justin.sarnik@bixal.com\"\n                },\n                \"products\":[\n                    {\n                        \"id\": 1,\n                        \"title\": \"AOC 22\\\" MONITOR\",\n                        \"desc\": \"AOC 22\\\" MONITOR, AOC 22\\\" MONITOR, AOC 22\\\" MONITOR, AOC 22\\\" MONITOR, AOC 22\\\" MONITOR, AOC 22\\\" MONITOR\"\n                    },\n                    {\n                        \"id\": 2,\n                        \"title\": \"MacBook Keyboard\",\n                        \"desc\": \"MacBook Keyboard, MacBook Keyboard, MacBook Keyboard, MacBook Keyboard, MacBook Keyboard, MacBook Keyboard\"\n                    }\n                ],\n                \"steps\":[\n                    {\n                        \"id\": 1,\n                        \"status\": \"Ordered\",\n                        \"timestamp\": null,\n                        \"isPending\": true,\n                        \"isFilled\": false\n                    },\n                    {\n                        \"id\": 2,\n                        \"status\": \"Reviewed\",\n                        \"timestamp\": null,\n                        \"isPending\": true,\n                        \"isFilled\": false\n                    },\n                    {\n                        \"id\": 3,\n                        \"status\": \"Signed-Off\",\n                        \"timestamp\": null,\n                        \"isPending\": true,\n                        \"isFilled\": false\n                    },\n                    {\n                        \"id\": 4,\n                        \"status\": \"Ready For Pickup\",\n                        \"timestamp\": null,\n                        \"isPending\": true,\n                        \"isFilled\": false\n                    },\n                    {\n                        \"id\": 5,\n                        \"status\": \"Delivered\",\n                        \"timestamp\": null,\n                        \"isPending\": true,\n                        \"isFilled\": false\n                    }\n                ]\n            }\n        }\n    }\n\n    placeOrder = () =>{\n        this.props.orderActions.placeOrder(this.state.order).then(res =>{\n            this.setState({\n                order: res,\n                isPlaced: true\n            });\n            window.location.href = `/order-confirmation/${res.id}`;\n        }).catch(err=>{\n            console.log(err)\n        })\n    }\n\n    render() {\n        return(\n            <div className=\"order-container\">\n                <div className=\"mt-2 mb-3\">\n                    <p>We come to you when you're ready. Pick a time and a technician will show up with your order and help you get everything set up.</p>\n                    <p>Here are some times that appear to be free on your calendar:</p>\n                </div>\n                <Order order={this.state.order}></Order>\n                <SubmitOrderButton submitOrderFn={this.placeOrder}></SubmitOrderButton>\n            </div>\n        )\n    }\n}\n\nfunction mapStateToProps(state, ownProps){\n    return {\n        order: state.order\n    };\n  }\n \n  function mapDispatchToProps(dispatch){\n   return {\n     orderActions: bindActionCreators(orderActions, dispatch)\n   };\n }\n\nexport default connect(mapStateToProps, mapDispatchToProps)(CheckOut);\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { bindActionCreators } from 'redux';\nimport * as orderActions from '../actions/orderActions';\nimport * as _ from 'lodash';\nimport Products from './Products';\n\nclass OrderConfirm extends Component {\n    constructor(props){\n        super();\n        this.orderId = props.match.params.id;\n        this.state = {\n            \n        }\n    }\n\n    componentDidMount = () =>{\n        this.props.orderActions.getOrder(this.orderId).then(res =>{\n            this.setState({\n                order: res\n            });\n        }).catch(err=>{\n            console.log(err)\n        })\n    }\n\n    handleButtonClick = () => {\n        window.location.href = `/order-status/${this.props.order.id}`;\n    }\n\n    render() {\n        return(\n            <div className=\"order-confirm-container\">\n                <div>Confirm Order</div>\n                <div>Your Order Has Been Placed: </div>\n                <Products products={this.props.order.products}></Products>\n                <button type=\"button\" className=\"btn-info btn-block btn-lg\" onClick={()=>{this.handleButtonClick()}}>track order</button>\n            </div>\n        )\n    }\n}\n\nfunction mapStateToProps(state, ownProps){\n    return {\n        order: state.order\n    };\n  }\n \n  function mapDispatchToProps(dispatch){\n   return {\n     orderActions: bindActionCreators(orderActions, dispatch)\n   };\n }\n\nexport default connect(mapStateToProps, mapDispatchToProps)(OrderConfirm);\n","import * as types from './actionTypes';\nimport * as _ from 'lodash';\n\nexport function deleteNotificationSuccess(id){\n    return {type: types.DELETE_NOTIFICATION_SUCCESS, id};\n}\n\nexport function deleteNotification(notificationId){\n    return function(dispatch){\n        dispatch(deleteNotificationSuccess(notificationId));\n    }\n}\n\nexport function newNotificationSuccess(notification){\n    return {type: 'NEW_NOTIFICATION_SUCCESS', notification};\n}\n\nexport function mockTicketNotification(order, stepId){\n    return function(dispatch){\n        let step = _.find(order.steps, {'id': stepId}),\n        note = {\n            notificationType: 'ticket',\n            displayMessage: `Ticket Submitted: Order #:${order.id} | Blocked-Action: ${step.status}`,\n            timestamp: new Date(),\n            notificationId: new Date().getTime()\n        };\n        dispatch(newNotificationSuccess(note));\n    }\n}","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { bindActionCreators } from 'redux';\nimport { withRouter } from 'react-router-dom';\nimport * as orderActions from '../actions/orderActions';\nimport * as notificationActions from '../actions/notificationActions';\nimport * as _ from 'lodash';\nimport * as moment from 'moment';\nconst tsFormat = (date) => moment(date).format('M/DD/YY hh:mm A').trim();\n\nconst Steps = (props) =>{\n    let index = 0;\n    return _.map(props.steps, (step)=>{\n        index++;\n        let isLast = index === props.steps.length;\n        return (\n            <Step step={step} isLast={isLast} key={step.id} submitTicketFn={props.submitTicketFn}></Step>\n        )\n    });\n}\n\nconst Spacer = (props) =>{\n    return (\n        <div className=\"flex-container\">\n            <div className={`flex-item spacer ${props.type}`}></div>\n        </div>\n    )\n}\n\nconst Step = (props) =>{\n    let isBlocked = (props.step.timestamp && !props.step.isFilled) || (!props.step.isFilled && !props.step.isPending),\n    type = props.step.isFilled ? 'full' : 'half';\n    return (\n        <div>\n            <div className={`step flex-container ${props.step.isFilled ? 'filled' : ''} ${isBlocked ? 'blocked' : ''}`}>\n                <div className={`flex-item`}>\n                    <div className=\"step-box\"></div>\n                </div>\n                <div className=\"flex-item\">-</div>\n                <div className=\"flex-item step-info\">\n                    <span className=\"step-status\">{props.step.status}</span>\n                    {props.step.timestamp ? <span className=\"step-date\"> - {tsFormat(props.step.timestamp)}</span> : null}\n                </div>\n            </div>\n            {isBlocked ? \n                <div className=\"flex-container\">\n                    <div className=\"flex-item\">This step is taking longer than average to proceed. </div>\n                    <div className=\"flex-item\">\n                        {props.step.ticket && !props.step.ticket.isResolved ?\n                            <span>Ticket Submitted: {tsFormat(props.step.ticket.timestamp)}</span>\n                        :\n                            <button className=\"btn btn-link\" onClick={()=>props.submitTicketFn(props.step.id)}>Submit Ticket</button>\n                        }\n                    </div>\n                </div>\n            : null}\n            {!props.isLast ? <Spacer type={type}></Spacer> : null}\n        </div>\n    )\n}\n\nclass TrackOrder extends Component {\n    constructor(props){\n        super();\n        this.orderId = props.match.params.id;\n        this.state = {}\n    }\n\n    componentDidMount = () =>{\n        if(_.isEmpty(this.props.order)){\n            this.props.orderActions.getOrder(this.orderId).then(res =>{\n                this.fillStepsTimer(2, 4);\n            }).catch(err=>{\n                console.log(err)\n            })\n        }\n    }\n\n    componentDidUpdate = (prevProps) =>{\n        if(prevProps.order.steps !== this.props.order.steps){\n           if(_.findIndex(this.props.order.steps, {isFilled: false}) === -1){\n               this.setAllFilled();\n           }\n        }\n    }\n\n    setAllFilled(){\n        this.setState({\n            isReadyForPickup: true\n        })\n    }\n\n    fillStepsTimer = (startStepId, unFilledStep) =>{\n        let stepId = startStepId,\n        interval = setInterval(()=>{\n            let _steps = _.cloneDeep(this.props.order.steps),\n            step = _.find(_steps, {'id': stepId}),\n            prevStep = _.find(_steps, {'id': stepId-1});\n\n            if(stepId <= _steps.length && prevStep.isFilled){\n                step.isPending = false;\n                step.isFilled = unFilledStep && unFilledStep === stepId ? false : true;\n                step.timestamp = new Date().getTime();\n                this.props.orderActions.updateOrderStatus(_steps);\n                stepId++;\n            }else{\n                clearInterval(interval);\n            }\n        }, 500) \n    }\n\n    submitTicket = (stepId) =>{\n        let _steps = _.cloneDeep(this.props.order.steps),\n        step = _.find(_steps, {'id': stepId});\n        step.ticket = {\n            timestamp: new Date().getTime(),\n            isResolved: false\n        }\n        this.props.orderActions.updateOrderStatus(_steps);\n        this.props.notificationActions.mockTicketNotification(this.props.order, stepId);\n\n        setTimeout(()=>{\n            let _steps = _.cloneDeep(this.props.order.steps),\n            step = _.find(_steps, {'id': stepId});\n\n            step.ticket.isResolved = true;\n            step.isFilled = true;\n            this.props.orderActions.updateOrderStatus(_steps);\n            this.fillStepsTimer(stepId + 1, null);\n        }, 1000);\n    }\n\n    handlePickupClick = () =>{\n        window.location.href = `/schedule-pickup/${this.props.order.id}`;\n    }\n\n    render() {\n        let items = this.props.order.products ? this.props.order.products.length : 0;\n        return(\n            <div className=\"status-container\">\n                <div className=\"mt-2 mb-3\">\n                    <p>Tracking Order #: {this.props.order.id}</p>\n                    <p>Items: {items}</p>\n                    <p>Order Date: {tsFormat(this.props.order.placedDate)}</p>\n                </div>\n                <div className=\"steps-container\">\n                    <Steps steps={this.props.order.steps} submitTicketFn={this.submitTicket}></Steps>\n                    {this.state.isReadyForPickup ? \n                        <div className=\"mt-2 mb-3\">\n                            <button type=\"button\" className=\"btn btn-primary btn-block btn-lg\" onClick={()=>{this.handlePickupClick()}}>Schedule Pickup Date</button>\n                        </div>\n                    : null}\n                </div>\n            </div>\n        )\n    }\n}\n\nfunction mapStateToProps(state, ownProps){\n    return {\n        order: state.order,\n        notifications: state.notifications\n    };\n  }\n \n  function mapDispatchToProps(dispatch){\n   return {\n     orderActions: bindActionCreators(orderActions, dispatch),\n     notificationActions: bindActionCreators(notificationActions, dispatch),\n   };\n }\n\nexport default connect(mapStateToProps, mapDispatchToProps)(TrackOrder);\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { bindActionCreators } from 'redux';\nimport * as orderActions from '../actions/orderActions';\nimport * as notificationActions from '../actions/notificationActions';\nimport * as _ from 'lodash';\nimport * as moment from 'moment';\nimport Grid from '@material-ui/core/Grid';\nimport { makeStyles } from '@material-ui/core/styles';\nimport DateFnsUtils from '@date-io/date-fns';\nimport {\n  MuiPickersUtilsProvider,\n  KeyboardTimePicker,\n  KeyboardDatePicker,\n} from '@material-ui/pickers';\nimport Button from '@material-ui/core/Button';\n\nconst baseUri = process.env.NODE_ENV === 'production' ? 'https://bixal-cms-prototype.herokuapp.com' : 'http://localhost:3001';\nconst tsFormat = (date) => moment(date).format('M/DD/YY hh:mm A').trim();\nconst tsFormatDay = (date) => moment(date).format('dddd - M/DD/YY').trim();\nconst tsTimeFormat = (date) => {\n       return `${moment(date).format('h').trim()} - ${moment(date).add(30, 'minutes').format('hh:mm A').trim()}`;\n}\n\nconst DatePicker = (props) =>{\n    return (\n        <MuiPickersUtilsProvider utils={props.utils}>\n            <Grid container className={props.classes} justify=\"space-around\">\n                <KeyboardDatePicker\n                    margin=\"normal\"\n                    id=\"mui-pickers-date\"\n                    label=\"Select Date\"\n                    value={props.selectedDate}\n                    onChange={props.handleDateChange}\n                    KeyboardButtonProps={{\n                    'aria-label': 'select date',\n                    }}\n                />\n                <KeyboardTimePicker\n                    margin=\"normal\"\n                    id=\"mui-pickers-time\"\n                    label=\"Select Time\"\n                    value={props.selectedDate}\n                    onChange={props.handleDateChange}\n                    KeyboardButtonProps={{\n                    'aria-label': 'select time',\n                    }}\n                />\n            </Grid>\n        </MuiPickersUtilsProvider>\n    )\n}\n\nconst Radios = (props) =>{\n    let times = [\n        new Date('2019-06-25 12:00:00 PM'),\n        new Date('2019-06-25 3:00:00 PM'),\n        new Date('2019-06-26 9:00:00 AM')\n    ];\n    return _.map(times, (time)=>{\n        return(\n            <label className=\"btn btn-outline-secondary btn-block text-left font-weight-bolder\" key={time.getTime()}>\n            <input type=\"radio\" autoComplete=\"off\" name=\"time\" id=\"time1\" onClick={()=>{props.handleDateChange(time)}} /> {tsFormatDay(time)} <br/>\n                    <small className=\"font-weight-normal pl-4\">{tsTimeFormat(time)}</small>\n            </label>\n        )\n    })\n}\n\nclass Schedule extends Component {\n    constructor(props){\n        super(props);\n        this.orderId = props.match.params.id;\n        this.state = {\n            selectedDate: new Date().getTime()\n        }\n        this.classes = makeStyles({\n            grid: {\n              width: '60%',\n            },\n          });\n    }\n\n\n    componentDidMount = () =>{\n        if(_.isEmpty(this.props.order)){\n            this.props.orderActions.getOrder(this.orderId).then(res =>{\n\n            }).catch(err=>{\n\n            })\n        }\n    }\n\n    handleDateChange = (date) =>{\n        this.setState({\n            selectedDate: date\n        })\n    }\n\n    handleConfirm = () =>{\n        this.props.orderActions.createICS(this.props.order, this.state.selectedDate).then(res => {\n            this.setState({\n                isReadyForDownload: true\n            })\n        }).catch(err => {\n\n        })\n    }\n\n    handleDownloadICS = () =>{\n        window.location.href = `${baseUri}/api/downloadICS`;\n    }\n\n    handleChooseDate = () =>{\n        this.setState({\n            isShowDatePicker: true\n        })\n    }\n\n    render() {\n        return(\n            <div className=\"schedule-container\">\n\n                <div className=\"mt-2 mb-3\">\n                    <p>We come to you when you're ready. Pick a time and a technician will show up with your order and help you get everything set up.</p>\n                    <p>Here are some times that appear to be free on your calendar:</p>\n                    <p>{tsFormat(this.state.selectedDate)}</p>\n                </div>\n                \n                \n                <div>\n                    <Radios handleDateChange={this.handleDateChange}></Radios>\n                </div>\n                        \n                    \n                <div className=\"container\">\n                    {this.state.isShowDatePicker ?\n                        <DatePicker utils={DateFnsUtils} classes={this.classes} selectedDate={this.state.selectedDate} handleDateChange={this.handleDateChange}></DatePicker>\n                    : null}\n                    {this.state.isReadyForDownload ?\n                        <button  type=\"button\" className=\"btn btn-success btn-block btn-lg\" onClick={()=>{this.handleDownloadICS()}}>Download ICS</button>\n                    : <button type=\"button\" className=\"btn btn-primary btn-block btn-lg\" onClick={()=>{this.handleConfirm()}}>Set Delivery Time</button>}\n                    <p className=\"mt-3\">None of these work? <a href=\"#\" onClick={()=>{this.handleChooseDate()}}>Find another time</a></p>  \n                </div>\n            </div>\n        )\n    }\n}\n\nfunction mapStateToProps(state, ownProps){\n    return {\n        order: state.order,\n        notifications: state.notifications\n    };\n  }\n \n  function mapDispatchToProps(dispatch){\n   return {\n     orderActions: bindActionCreators(orderActions, dispatch),\n     notificationActions: bindActionCreators(notificationActions, dispatch),\n   };\n }\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Schedule);\n","import React from 'react';\nimport { Switch, Route, Redirect } from \"react-router-dom\";\nimport CheckOut from './CheckOut';\nimport OrderConfirm from './OrderConfirm';\nimport TrackOrder from './TrackOrder';\nimport Schedule from './Schedule';\n// import PickupConfirm from './PickupConfirm';\n\nconst Routes = (props) => {\n    return (\n        <div className=\"container\">\n            <Switch>\n                <Route exact path=\"/\" render={(props) => <CheckOut pageTitle={'Check Out'} {...props}/>} >\n                    <Route exact path=\"/checkout\" render={(props) => <CheckOut {...props}/>} />\n                </Route>\n                <Route exact path=\"/order-confirmation/:id\" render={(props) => <OrderConfirm {...props}/>} />\n                <Route exact path=\"/order-status/:id\" render={(props) => <TrackOrder {...props}/>} />\n                <Route exact path=\"/schedule-pickup/:id\" render={(props) => <Schedule {...props}/>} />\n            </Switch>\n        </div>\n    )\n};\n\nexport default Routes;","import React, { Component } from 'react';\nimport { withRouter } from 'react-router-dom';\nimport * as _ from 'lodash';\n\nclass HeaderBar extends Component {\n    constructor(props){\n      super(props);\n      console.log(props);\n      this.state = {\n        pageTitle: 'Check Out'\n      }\n    }\n\n    render() {\n      return(\n        <nav className=\"navbar navbar-light bg-light\">\n          <a href=\"/\">Cart</a>\n          <span className=\"navbar-brand mb-0 h1\">{this.props.pageTitle || null}</span>\n        </nav>\n      )\n    }\n }\n \n export default withRouter(HeaderBar);\n ","import React from 'react';\nimport moment from 'moment';\nconst tsFormat = (date) => moment(date).format('M/DD/YY hh:mm A').trim();\n\nconst Notification = (props) => {\n    return (\n        <div class=\"notification\">\n            <div class=\"alert alert-info\" role=\"alert\">\n                <p>{tsFormat(props.time)}</p>\n                <p>{props.message}</p>\n            </div>\n            <button type=\"button\" className=\"btn btn-outline-info\" onClick={()=>{props.closeFn(props.id)}}>Close</button>\n        </div>\n    )\n};\n\nexport default Notification;","import React, { Component } from 'react';\nimport * as notificationActions from '../actions/notificationActions';\nimport { connect } from 'react-redux';\nimport { bindActionCreators } from 'redux';\nimport Notification from './Notification';\nimport * as _ from 'lodash';\n\nclass Notifications extends Component {\n    constructor(props){\n        super();\n    }\n\n    handleCloseClick = (notificationId) =>{\n        this.props.notificationActions.deleteNotification(notificationId);\n    }\n\n    notificationsContainer = () =>{\n        let ordered = _.orderBy(this.props.notifications.model, ['timestamp'],['desc']);\n        return _.map(ordered, note =>{\n            return(\n                <Notification isAnimate={true} type={note.side} message={note.displayMessage} time={note.timestamp} id={note.notificationId} closeFn={this.handleCloseClick} isFixed={false}/>\n            )\n        });\n    }\n\n    render() {\n        return this.props.notifications.model ? (\n            <div className=\"notifications-container flex-container column\">\n                {this.notificationsContainer()}\n            </div>\n        ) : null;\n    }\n }\n\nfunction mapStateToProps(state, ownProps){\n    return {\n        notifications: state.notifications,\n    };\n}\n\nfunction mapDispatchToProps(dispatch){\n    return {\n        notificationActions: bindActionCreators(notificationActions, dispatch)\n    };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps) (Notifications);\n","import React, { Component } from 'react';\nimport Routes from './components/Routes';\nimport HeaderBar from './components/HeaderBar';\nimport Notifications from './components/Notifications';\n\nclass App extends Component {\n  constructor(props){\n    super();\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n          <HeaderBar/>\n          <Routes />\n          <Notifications />\n      </div>\n    );\n  }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import { createStore, applyMiddleware } from 'redux';\nimport rootReducer from '../reducers';\nimport reduxImmutableStateInvariant from 'redux-immutable-state-invariant';\nimport thunk from 'redux-thunk';\n\nexport default function configureStore(initialState){\n    return createStore(\n        rootReducer,\n        initialState,\n        applyMiddleware(thunk, reduxImmutableStateInvariant())\n    );\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport configureStore from './store/configureStore';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { BrowserRouter as Router } from \"react-router-dom\";\nimport { Provider } from 'react-redux';\nimport './css/main.css';\n\nconst store = configureStore();\n\nReactDOM.render(\n    <Provider store={store}>\n        <Router>\n            <App/>\n        </Router>\n    </Provider>\n, \ndocument.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}